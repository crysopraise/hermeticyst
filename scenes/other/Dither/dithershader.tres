[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://assets/textures/dither map cell noise 02 8x8.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform sampler2D dither_pattern;
uniform bool enabled = true;
uniform bool greyscale = false;
uniform float dither_amount = 1.0;
uniform int colours = 4;

uniform vec2 time_factor = vec2(0.1, 0.5);
uniform vec2 amplitude = vec2(0.05, 0.15);

float dither(float raw, float dither, int depth) {
	
	float div = 1.0 / float(depth);
	float val = 0.0;
	
	for (int i = 0; i < depth; i++) {
		if (raw <= div * (float(i + 1))) {
			if ((raw * float(depth)) - float(i) <= dither * 0.999) 	{val = div * float(i);}
			else													{val = div * float(i + 1);}
			break;
		}
	}

	return val;
}

void fragment() {
	vec3 raw = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;
	vec2 dither_uv = SCREEN_UV;
	dither_uv.x += sin(TIME * time_factor.x + (dither_uv.x + dither_uv.y)) * amplitude.x;
	dither_uv.y += sin(TIME * time_factor.y + (dither_uv.x + dither_uv.y)) * amplitude.y;
	
	dither_uv = mod(dither_uv, 1.0);
	vec3 dither_pixel = texture(dither_pattern, dither_uv).rgb;
	
	if (enabled == true) {
		
		if (greyscale == true) {
			raw.rgb = vec3((raw.r + raw.g + raw.b) / 3.0);
		}
		
		COLOR.r = dither(raw.r, (dither_pixel.x - 0.5) * dither_amount + 0.5, colours - 1);
		COLOR.g  = dither(raw.g, (dither_pixel.x - 0.5) * dither_amount + 0.5, colours - 1);
		COLOR.b = dither(raw.b, (dither_pixel.x - 0.5) * dither_amount + 0.5, colours - 1);
		
	} else {
		COLOR.rgb = raw.rgb;
	}
}
"

[resource]
shader = SubResource( 1 )
shader_param/enabled = true
shader_param/greyscale = false
shader_param/dither_amount = 0.667
shader_param/colours = 24
shader_param/time_factor = Vector2( 0.15, 0.75 )
shader_param/amplitude = Vector2( 0.075, 0.1 )
shader_param/dither_pattern = ExtResource( 1 )
