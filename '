extends KinematicBody

export var SPAWN_POINT_COUNT = 10
export var RADIUS = 3

func _ready():
	for p in get_spawn_points(SPAWN_POINT_COUNT, RADIUS):
		var spawn_point = Spatial.new()
		spawn_point.transform = Transform(Basis.IDENTITY, p)
		print('before', spawn_point.transform.basis.z)
		spawn_point.transform.basis.z = spawn_point.transform.origin.normalized()
		print('after', spawn_point.transform.basis.z)
		$Rotater.add_child(spawn_point)
	
	# Show points
	var im = ImmediateGeometry.new()
	im.clear()
	im.begin(Mesh.PRIMITIVE_POINTS)
	im.set_color(Color(1,0,0))
	#set_normal(Vector3(0, 0, 1))
	#set_uv(Vector2(0, 0,))
	for s in $Rotater.get_children():
		im.add_vertex(s.transform.origin)
	
func _process(delta):
	#rotate_y(deg2rad(20) * delta)
	pass

func _on_shoot():
	for s in $Rotater.get_children():
		var bullet = preload("res://scenes/enemies/HellBullet.tscn").instance()
		get_tree().root.add_child(bullet)
		bullet.transform.origin = s.global_transform.origin
		#print(bullet.transform.basis, s.global_transform.basis)
		#bullet.transform.basis = s.global_transform.basis

func get_spawn_points(count=1, sphere_radius=1):
	var points = []
	var phi = PI * (3.0 - sqrt(5.0))

	for i in range(count):
		var y = 1 - (i / float(count - 1)) * 2
		var radius = sqrt(1 - y * y)

		var theta = phi * i

		var x = cos(theta) * radius
		var z = sin(theta) * radius

		points.append(Vector3(x, y, z) * sphere_radius)
	
	return points

